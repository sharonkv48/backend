
from AI.Querry.QuerryDB import query
from config.mongoDB import db
from datetime import datetime
from bson import ObjectId
from typing import Optional

def generate_response(
    question: str, 
    from_username: str, 
    from_name: str,
    to_username: Optional[str] = None
):
    """
    Asks a question to the AI model, generates a response, and saves the interaction to MongoDB.
    Args:
        question (str): The question to ask the AI model.
        from_username (str): The username of the user asking the question.
        from_name (str): The name of the user asking the question.
        to_username (Optional[str]): The username of the intended recipient (if any).
    Returns:
        str: The answer generated by the AI model.
    """
    # Modify the question to include recipient context if specified
    if to_username:
        context = f"[Message from {from_name} to {to_username}] {question}"
    else:
        context = question

    # Get the AI response with the modified context
    ai_response = query(context)
    
    # Create timestamp
    current_time = datetime.now()
    
    # Save the interaction to the MongoDB database
    chat_data = {
        "from_username": from_username,
        "from_name": from_name,
        "to_username": to_username,
        "query": question,
        "response": ai_response,
        "timestamp": current_time,
        "_id": str(ObjectId())
    }
    
    # Insert into database
    result = db["chats"].insert_one(chat_data)
    
    # Update the _id in chat_data to be a string
    chat_data["_id"] = str(result.inserted_id)
    
    return ai_response